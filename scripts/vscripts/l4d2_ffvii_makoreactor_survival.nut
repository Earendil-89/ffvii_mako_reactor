/*============================================================================================
									Main Script
----------------------------------------------------------------------------------------------
	* Author:	EÃ¤rendil
	* Version:	1.4
	* Desc:		Main Mako Reactor script, sets level, damage filters, and some configs
				script is called by other scripts.
----------------------------------------------------------------------------------------------*/
// Create root table variables the first time map starts (variables dont reset on round restart)
if (!("MakoMasterLevel" in getroottable()))
{
	::MakoMasterLevel <- 0;
	::MakoRoundCount <- 0;
	::MakoMateriasLevel <- 0;
	::MaxCIAllowed <- 0;
	::BahaOnGame <- false;
}

Convars.SetValue ("survivor_limp_health", "0")
Convars.SetValue ("defibrillator_use_duration", "2")
Convars.SetValue ("defibrillator_return_to_life_time", "1.5")
Convars.SetValue ("first_aid_kit_use_duration", "3")
Convars.SetValue ("survivor_ledge_grab_ground_check_time", "2")
Convars.SetValue ("survivor_revive_duration", "3")

function AllowTakeDamage(DamageTable)
{
	// Global debug on all damages
	// foreach (k,v in DamageTable)
	// {
	// 	printl (k + ": " + v)
	// }
	// Disable the 10 HP penalty when a player is out of bounds
	if (DamageTable.Attacker == DamageTable.Victim && DamageTable.DamageDone == 10 && DamageTable.DamageType == 0)
	{
		// DEBUG
		// printl ("Intercepted 10 HP damage penalty, Removing.");
		return false;
	}
	// Removes the spitter goo generated by a player out of bounds
	if (DamageTable.Attacker.GetClassname() == "player" && DamageTable.Attacker.IsSurvivor() && (DamageTable.DamageType == 263168))
	{
		// DEBUG
		// printl ("Intercepted Spitter Goo, Removing.");
		local SpitterGoo = null
		while (SpitterGoo = Entities.FindByClassname(SpitterGoo, "insect_swarm"))
		{
			DoEntFire ("!self", "Kill", "", 0, SpitterGoo, SpitterGoo);
		}
		return false;
	}
	// Modifier of weapon damages for Bahamut and Boss
	if ((DamageTable.Victim.GetName() == "Boss_hitbox" || DamageTable.Victim.GetName() == "Baha_hitbox" || DamageTable.Victim.GetName == "Sephiroth_Dynamic_Bridge") && DamageTable.Attacker.GetClassname() == "player" && DamageTable.Attacker.IsSurvivor())
	{
		// Filter grenade launcher and throwables damagetype to prevent code execution error
		if (DamageTable.DamageType != 16779328 && DamageTable.DamageType != 33556480 && DamageTable.DamageType != 2056 && DamageTable.DamageType != 128 && DamageTable.DamageType != 134219840 && DamageTable.DamageType != 8)
		{
			//50% Damage if the weapon is an automatic shotgun
			if (DamageTable.Weapon.GetClassname() == "weapon_autoshotgun" || DamageTable.Weapon.GetClassname() == "weapon_shotgun_spas")
			{
				DamageTable.DamageDone = DamageTable.DamageDone * 0.5;
				// DEBUG
				// printl ("Final damage: " + DamageTable.DamageDone)
				return true;
			}
			//75% Damage if the weapon is a pump shotgun
			if (DamageTable.Weapon.GetClassname() == "weapon_shotgun_chrome" || DamageTable.Weapon.GetClassname() == "weapon_pumpshotgun")
			{
				DamageTable.DamageDone = DamageTable.DamageDone * 0.75;
				// DEBUG
				// printl ("Final damage: " + DamageTable.DamageDone)
				return true;
			}
			// Double the damage if the weapon is a magnum pistol
			if (DamageTable.Weapon.GetClassname() == "weapon_pistol_magnum")
			{
				DamageTable.DamageDone = DamageTable.DamageDone * 2;
				// DEBUG
				// printl ("Final damage: " + DamageTable.DamageDone)		
				return true;
			}
			// +50% damage from sniper rifles and pistols
			if (DamageTable.Weapon.GetClassname() == "weapon_sniper_military" || DamageTable.Weapon.GetClassname() == "weapon_hunting_rifle" || DamageTable.Weapon.GetClassname() == "weapon_pistol")
			{
				DamageTable.DamageDone = DamageTable.DamageDone * 1.5;
				// DEBUG
				// printl ("Final damage: " + DamageTable.DamageDone)
				return true;
			}
			else
			{
				return true
			}
		}
		else
		{
			// Prevent overdamage from molotovs
			if (DamageTable.DamageType != 8)
			{
				// Increase Grenade Launcher damage to 900 a direct hit, 450 by blast damage only
				DamageTable.DamageDone = 450;
				//DEBUG
				// printl ("Final damage (GRENADE LAUNCHER): " + DamageTable.DamageDone)
				return true;
			}
			else
			{
				return true;
			}
		}
	}
	else
	{
		return true;
	}
}

function SetMakoLevel()
{
	DoEntFire("LevelCase", "InValue", MakoMasterLevel.tostring(), 0, null, null);
}

function SetMateriasLvl()
{
	if (MakoMateriasLevel < 3)
	{
		if (MakoRoundCount == 2)
		{
			MakoRoundCount = 0;
			MakoMateriasLevel++;
		}
	MakoRoundCount++;
	}
	DoEntFire("MateriaMasterCase", "InValue", MakoMateriasLevel.tostring(), 0, null, null);
}

function NameSurvivorsOnMapSpawn()
{
	local i = null
	while (i = Entities.FindByClassname(i, "player"))
	{
		DoEntFire("!self", "AddOutput", "targetname SurvivorNull", 0, i, i);
	}
}

function RenameSurvivors()
{
	local i = null
	local j = null
	while (i = Entities.FindByClassname(i, "player"))
	{
		j = i.GetName();
		if (i.IsSurvivor() && IsPlayerABot(i))
		{
			DoEntFire("!self", "AddOutput", "targetname SurvivorBot", 0, i, i);
		}
		else if (i.IsSurvivor() && !IsPlayerABot(i) && j != "MateriaCarrier")
		{
			DoEntFire("!self", "AddOutput", "targetname SurvivorHuman", 0, i, i);
		}
	}
}

function SpeedUpBots()
{
	local i = null
	while (i = Entities.FindByName(i, "SurvivorBot"))
	{
		DoEntFire ("playerspeed", "ModifySpeed", "1.20", 0, i, null);
	}
}

function DefaultBotSpeed()
{
	local i = null
	while (i = Entities.FindByName(i, "SurvivorBot"))
	{
		DoEntFire ("playerspeed", "ModifySpeed", "1.0", 0, i, null);
	}
}

function SephirothHealth()
{
	local i = null
	local SephHP = 0
	local counter = 0
	while (i = Entities.FindByClassname (i, "player"))
	{
		if (!IsPlayerABot(i))
		{
			counter++;
		}
	}
	if (MakoMasterLevel == 3)
	{
		SephHP = 510 * counter;
	}
	else
	{
		SephHP = 650 * counter;
	}
	while (i = Entities.FindByName (i, "Seph_rush_hitbox"))
	{
		i.SetHealth(SephHP);
	}
}